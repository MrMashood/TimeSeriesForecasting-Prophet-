# -*- coding: utf-8 -*-
"""AppliancesCountAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/115dk5Cl-hYi2Zsx8g-azaPUL6VQM4TZ1

##Importing Libraries and Loading Data
"""

import pandas as pd
from prophet import Prophet
from matplotlib import pyplot
from matplotlib.pyplot import figure
from sklearn.metrics import mean_absolute_error
import plotly.express as px
import plotly.graph_objects as go

df= pd.read_csv('/content/energydata.csv')
df.head()

df.shape

df.dtypes

"""##Preprocessing and Changing Data for Prophet Model"""

df = df[['date', 'Appliances']]
df['date'] = pd.to_datetime(df['date'], dayfirst=True).dt.date
df = df.groupby('date', as_index=False).sum()
df

df.plot(x='date', y='Appliances',figsize=(15, 5))

df.columns = ['ds', 'y']
df.head()

"""##Fitting the Prophet Model"""

model = Prophet()
model.fit(df)

future_dates = model.make_future_dataframe(periods=365, freq='d', include_history=True)
prediction = model.predict(future_dates)

trace_open = go.Scatter(x=prediction["ds"], y=prediction["yhat"], mode='lines', name="Forecast")
trace_high = go.Scatter(x=prediction["ds"], y=prediction["yhat_upper"], mode='lines', fill="tonexty", line={"color": "#57b8ff"}, name="Higher uncertainty interval")
trace_low = go.Scatter(x=prediction["ds"], y=prediction["yhat_lower"], mode='lines', fill="tonexty", line={"color": "#57b8ff"}, name="Lower uncertainty interval")
trace_close = go.Scatter(x=df["ds"], y=df["y"], name="Data values")

data = [trace_open, trace_high, trace_low, trace_close]
layout = go.Layout(title="Energy Consumption Forecasting")

fig = go.Figure(data=data, layout=layout)
fig.show()

y_true = df['y'].values
y_pred = prediction['yhat'][:len(df)].values
mae = mean_absolute_error(y_true, y_pred)
print('MAE: %.3f' % mae)

"""##Optimizing the Model"""

model_opt = Prophet(daily_seasonality=True).add_seasonality(name='yearly', period=365, fourier_order=70)
model_opt.fit(df)

future_dates = model_opt.make_future_dataframe(periods=365, freq='d', include_history=True)

prediction = model_opt.predict(future_dates)

trace_open = go.Scatter(x=prediction["ds"], y=prediction["yhat"], mode='lines', name="Forecast")
trace_high = go.Scatter(x=prediction["ds"], y=prediction["yhat_upper"], mode='lines', fill="tonexty", line={"color": "#57b8ff"}, name="Higher uncertainty interval")
trace_low = go.Scatter(x=prediction["ds"], y=prediction["yhat_lower"], mode='lines', fill="tonexty", line={"color": "#57b8ff"}, name="Lower uncertainty interval")
trace_close = go.Scatter(x=df["ds"], y=df["y"], name="Data values")

data = [trace_open, trace_high, trace_low, trace_close]
layout = go.Layout(title="Energy Consumption Forecasting")

fig = go.Figure(data=data, layout=layout)
fig.show()

y_true = df['y'].values
y_pred = prediction['yhat'][:len(df)].values
mae = mean_absolute_error(y_true, y_pred)
print('MAE: %.3f' % mae)